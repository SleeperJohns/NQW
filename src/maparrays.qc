// A custom map list for custom coop to play randomly. When adding maps to the maps folder, also add their bsp names here.
string CustomCoop_MapsList_World[] =
{
// Map Count: 160 (155 Usable).	
	"", // 0 Should be blank
	// Terra series by "CZG" (Original Version)
	"maps/terra1_classic.bsp", "maps/terra2_classic.bsp", "maps/terra3_classic.bsp", "maps/terra4_classic.bsp", "maps/terra5_classic.bsp", "maps/terra6_classic.bsp", 

	// IKSPQ series by "Fingers"
	"maps/IKSPQ1.BSP", "maps/IKSPQ2.BSP", "maps/IKSPQ3.BSP", "maps/IKSPQ4.BSP", "maps/IKSPQ5.BSP",
	
	// Mexx series by Matt Sefton
	"maps/mexx1.bsp", "maps/mexx2.bsp", "maps/mexx3.bsp", "maps/mexx4.bsp", "maps/mexx5.bsp", "maps/mexx6.bsp", "maps/mexx7.bsp", 
	
	// Cold Light (v1.2) series by "Addy & TheADrain" // Sleeper: addy_cl_m2.bsp was removed from the list due to a known softlock
	"maps/addy_cl_m1.bsp", /*"maps/addy_cl_m2.bsp",*/ "maps/addy_cl_m3.bsp", "maps/addy_cl_m4.bsp",
	
	// Speedmapping pack 218 - Episode 4 series by "AlexUnder", Chris Holden, "DariusGi", "Greenwood", "Mazu", "Ish", "iYago", "Newhouse", "Riktoi", "Yoder", "VuRkka" & "Zigi"
	"maps/sm218_alexunder.bsp", "maps/sm218_chrisholden.bsp", "maps/sm218_dariusgi.bsp", "maps/sm218_greenwood.bsp", "maps/sm218_hcm.bsp", "maps/sm218_ish.bsp",
	"maps/sm218_iyago.bsp", "maps/sm218_newhouse.bsp", "maps/sm218_riktoi.bsp", "maps/sm218_yoder.bsp", "maps/sm218_zigi.bsp",
	
	// Retro Jam 7 - Koohoo Theme series by Danz, Chris Holden, Eduardo SÃ¡nchez Barrios, "Entsoy", "Greenwood", "Ish", "iYago", "Radiatoryang", "RickyT23", "Scythe", "Zigi" & "Cocerello"
	"maps/rj7_chrisholden.bsp", "maps/rj7_eduardosanchezbarrios.bsp", "maps/rj7_entsoy.bsp", "maps/rj7_greenwood.bsp", "maps/rj7_ish.bsp", "maps/rj7_iyago.bsp",
	"maps/rj7_radiatoryang.bsp", "maps/rj7_rickyt23.bsp", "maps/rj7_scythe.bsp", /*"maps/rj7_zigi.bsp",*/ "maps/rj7_coce.bsp",
	
	// Retro Jam 4 - Episode 4 Tribute Theme by "Ericw", "FifthElephant", "ItEndsWithTens", "PulSaR", "TextFish", "Scampie", "Skacky", "Zwiffle" & "DeeDoubleU"
	"maps/retrojam4_ericw.bsp", "maps/retrojam4_fifth.bsp", "maps/retrojam4_pulsar.bsp", "maps/retrojam4_scampie.bsp", "maps/retrojam4_skacky.bsp",
	"maps/retrojam4_tens.bsp", "maps/retrojam4_textfish.bsp", "maps/retrojam4_zwiffle.bsp", "maps/retrojam4dlc_pulsar.bsp", "maps/retrojam4dlc_dw.bsp",
	
	// Deathmatch Classics Vol. 1 by Connor Fitzgerald, "Preacher", American McGee, "ZTN", "Ghandi", "Pingu", "Yataze" & John Romero
	"maps/dmc1m1.bsp", "maps/dmc1m2.bsp", "maps/dmc1m3.bsp", "maps/dmc1m4.bsp", "maps/dmc1m5.bsp", "maps/dmc1m6.bsp", "maps/dmc1m7.bsp",
				
	// Bunch of Random Maps picked from Quaddicted
	"maps/well.bsp", "maps/earthbnd.bsp", "maps/thetomb.bsp", "maps/outpost91.bsp", "maps/BiliousOutpost.bsp", "maps/DRANZSP1.bsp", "maps/canal.bsp", "maps/FIFFY2.BSP",
	"maps/windfsp1.bsp", "maps/nastrond.bsp", "maps/e1m1rmx.bsp", "maps/evildead.bsp", "maps/DWELL.bsp", "maps/thepit.bsp", "maps/ant.bsp", "maps/glorious.bsp",
	"maps/q1tm2_czg.bsp", "maps/trincasp2.bsp", "maps/purg2.bsp", "maps/citdoom.bsp", "maps/CURSE1.bsp", "maps/precon.bsp", "maps/Edom.bsp", "maps/jawbreak.bsp",
	"maps/qkdme1m1.bsp", "maps/IMP1SP1.bsp", "maps/egany.bsp", "maps/BNT.BSP", "maps/czg01.bsp", "maps/markiesm1.bsp", "maps/signati.bsp", "maps/eber1.bsp",
	"maps/frogsaction.bsp", "maps/rgdeep.bsp", "maps/prisonofhope.bsp", "maps/mountbase.bsp", "maps/sodahalls.bsp", "maps/xl7.bsp", "maps/cinburron.bsp", "maps/eod_1.bsp",
	"maps/eod_2.bsp", "maps/eod_3.bsp", "maps/eod_4.bsp", "maps/eod_5.bsp", "maps/eod_6.bsp", "maps/eod_7.bsp", "maps/eod_8.bsp", "maps/grim.bsp", "maps/PERSSP2.BSP",
	"maps/dragon.bsp", "maps/menk.bsp", "maps/terror.bsp", "maps/hellbrid.bsp", "maps/coagula2.bsp", "maps/oblivion.bsp", "maps/BASE-X2.bsp", "maps/phallusy.bsp", "maps/a3.bsp",
	"maps/CZG02.bsp", "maps/czg04.bsp", "maps/mcomplex.bsp", "maps/strong-hold.bsp", "maps/valour.bsp", "maps/solfall.bsp", "maps/outpost-alpha.bsp", "maps/PCGWHSE.BSP",
	"maps/tspe.bsp", "maps/darkness.bsp", "maps/temple_e1.bsp", "maps/Dm1m2.bsp", "maps/qkfort.bsp", "maps/base.bsp", "maps/wishes.bsp"/*, "maps/discord2.bsp"*/, "maps/odyssey1.bsp",
	"maps/chaos.bsp", "maps/ickle.bsp", /*"maps/actaltrz.bsp",*/ "maps/sadlark9.bsp", "maps/genetix.bsp", "maps/cjhsp1.bsp", "maps/ac.bsp", "maps/februus.bsp", "maps/gemch01.bsp",
	"maps/disturb.bsp", "maps/EPOCH.BSP", "maps/NAVYBASE.BSP", "maps/lunar.bsp", "maps/CHURCH.BSP", "maps/Janitor1.bsp", "maps/EROTIQUE.BSP", "maps/Royalwar.bsp",
	"maps/undrwrld.bsp", "maps/DARKFST.BSP", "maps/dspirl11.bsp", "maps/CRITTERS.BSP", "maps/DOOM2_MAP01.BSP", "maps/ARMA2.BSP", "maps/MISERY.BSP", "maps/CULT.BSP",
	"maps/desout.bsp",		
	""
};

string CustomDM_Maplist_World[] = 
{
	"",	
	// Deathmatch
	"maps/aerowalk.bsp", 	
	
	// CTF
	"maps/ctf1_3wave.bsp", "maps/ctf2_3wave.bsp", "maps/ctf3_3wave.bsp", "maps/ctf4_3wave.bsp", "maps/ctf5_3wave.bsp", "maps/ctf6_3wave.bsp", "maps/ctf7_3wave.bsp", "maps/ctf8_3wave.bsp", "maps/ctf8_3wave_qe.bsp", 
	"maps/ctf2m1.bsp", "maps/ctf2m2.bsp", "maps/ctf2m3.bsp", "maps/ctf2m4.bsp", "maps/ctf2m5.bsp", "maps/ctf2m6.bsp", "maps/ctf2m7.bsp", "maps/ctf2m8.bsp", 
	""
};

string HordeMode_MapsList_World[] =
{
//7	
	"", 
	"maps/horde1.bsp", "maps/horde2.bsp", "maps/horde3.bsp", "maps/horde4.bsp", "maps/horde5.bsp", "maps/horde6.bsp", "maps/horde7.bsp",
	""
};

string Start_Maplist_World[] =
{
	"", 
	"maps/start.bsp", "maps/hipstart.bsp", "maps/rstart.bsp", "maps/e5start.bsp", "maps/mgstart.bsp", "maps/hub.bsp",
	""
};

string ID1_Maplist_World[47] =
{
	"", // 0 Should be blank
	"maps/e1m1.bsp", "maps/e1m2.bsp", "maps/e1m3.bsp", "maps/e1m4.bsp", "maps/e1m5.bsp", "maps/e1m6.bsp", "maps/e1m7.bsp", "maps/e1m8.bsp", // EP1: Dimension Of The Doomed
	"maps/e2m1.bsp", "maps/e2m2.bsp", "maps/e2m3.bsp", "maps/e2m4.bsp", "maps/e2m5.bsp", "maps/e2m6.bsp", "maps/e2m7.bsp", // EP2: Realm Of Black Magic
	"maps/e3m1.bsp", "maps/e3m2.bsp", "maps/e3m3.bsp", "maps/e3m4.bsp", "maps/e3m5.bsp", "maps/e3m6.bsp", "maps/e3m7.bsp", // EP3: The Netherworld
	"maps/e4m1.bsp", "maps/e4m2.bsp", "maps/e4m3.bsp", "maps/e4m4.bsp", "maps/e4m5.bsp", "maps/e4m6.bsp", "maps/e4m7.bsp", "maps/e4m8.bsp", // EP4: The Elder World
	"maps/end.bsp", // Finale
	"maps/dm1sp.bsp", "maps/dm2sp.bsp", "maps/dm3sp.bsp", "maps/dm4sp.bsp", "maps/dm5sp.bsp", "maps/dm6sp.bsp", // Bonus Maps
	"maps/dm1.bsp", "maps/dm2.bsp", "maps/dm3.bsp", "maps/dm4.bsp", "maps/dm5.bsp", "maps/dm6.bsp", "maps/dm7.bsp", "maps/dm8.bsp", // Deathmatch Maps
	""
};

string HIP_Maplist_World[19] =
{
	"", // 0 Should be blank
	"maps/hip1m1.bsp", "maps/hip1m2.bsp", "maps/hip1m3.bsp", "maps/hip1m4.bsp", "maps/hip1m5.bsp", // EP1: Fortress Of The Dead
	"maps/hip2m1.bsp", "maps/hip2m2.bsp", "maps/hip2m3.bsp", "maps/hip2m4.bsp", "maps/hip2m5.bsp", "maps/hip2m6.bsp", // EP2: Dominion Of Darkness
	"maps/hip3m1.bsp", "maps/hip3m2.bsp", "maps/hip3m3.bsp", "maps/hip3m4.bsp", "maps/hipdm1.bsp", // EP3: The Rift
	"maps/hipend.bsp", // Finale
	""
};

string ROGUE_Maplist_World[20] =
{
	"", // 0 Should be blank
	"maps/r1m1.bsp", "maps/r1m2.bsp", "maps/r1m3.bsp", "maps/r1m4.bsp", "maps/r1m5.bsp", "maps/r1m6.bsp", "maps/r1m7.bsp", // EP1: Hell's Fortress 
	"maps/r2m1.bsp", "maps/r2m2.bsp", "maps/r2m3.bsp", "maps/r2m4.bsp", "maps/r2m5.bsp", "maps/r2m6.bsp", "maps/r2m7.bsp", // EP2: The Corridors Of Time
	"maps/r2m8.bsp", "maps/rend.bsp", // Finale
	"maps/ctf1.bsp", // CTF Map
	""
};

string DOPA_Maplist_World[14] =
{
	"", // 0 Should be blank
	"maps/e5m1.bsp", "maps/e5m2.bsp", "maps/e5m3.bsp", "maps/e5m4.bsp", "maps/e5m5.bsp", "maps/e5m6.bsp", "maps/e5m7.bsp", // EP1: Dimension Of The Past
	"maps/e5m8.bsp", "maps/e5end.bsp", // Finale 
	"maps/e5sm1.bsp", "maps/e5sm2.bsp", // New Secret Maps
	""
};

string MG1_Maplist_World[19] =
{
	"", // 0 Should be blank
	"maps/mge1m1.bsp", "maps/mge1m2.bsp", "maps/mge1m3.bsp", // EP1: Realm Of The Machinist
	"maps/mge2m1.bsp", "maps/mge2m2.bsp", // EP2: Realm Of The Blacksmiths
	"maps/mge3m1.bsp", "maps/mge3m2.bsp", // EP3: Realm Of The Stonemasons
	"maps/mge4m1.bsp", "maps/mge4m2.bsp", // EP4: Realm Of The Cultists
	"maps/mge5m1.bsp", "maps/mge5m2.bsp", // EP5: Realm Of The Astrologers
	"maps/mgend.bsp", // Finale
	"maps/mgdm1.bsp", "maps/mgdm2.bsp", "maps/mgdm3.bsp", "maps/mgdm4.bsp", // Deathmatch Maps
	""
};

string DM_Compatible_Maplist_World[] =
{
	"", 	
	// Quake: The Offering (ID1)
	"maps/e1m1.bsp", "maps/e1m2.bsp", "maps/e1m3.bsp", "maps/e1m4.bsp", "maps/e1m5.bsp", "maps/e1m6.bsp", "maps/e1m7.bsp", "maps/e1m8.bsp", // EP1: Dimension Of The Doomed
	"maps/e2m1.bsp", "maps/e2m2.bsp", "maps/e2m3.bsp", "maps/e2m4.bsp", "maps/e2m5.bsp", "maps/e2m6.bsp", "maps/e2m7.bsp", // EP2: Realm Of Black Magic
	"maps/e3m1.bsp", "maps/e3m2.bsp", "maps/e3m3.bsp", "maps/e3m4.bsp", "maps/e3m5.bsp", "maps/e3m6.bsp", "maps/e3m7.bsp", // EP3: The Netherworld
	"maps/e4m1.bsp", "maps/e4m2.bsp", "maps/e4m3.bsp", "maps/e4m4.bsp", "maps/e4m5.bsp", "maps/e4m6.bsp", "maps/e4m7.bsp", "maps/e4m8.bsp", // EP4: The Elder World
	"maps/end.bsp", // Finale
	"maps/dm1sp.bsp", "maps/dm2sp.bsp", "maps/dm3sp.bsp", "maps/dm4sp.bsp", "maps/dm5sp.bsp", "maps/dm6sp.bsp", // Bonus Maps
	"maps/dm1.bsp", "maps/dm2.bsp", "maps/dm3.bsp", "maps/dm4.bsp", "maps/dm5.bsp", "maps/dm6.bsp", "maps/dm7.bsp", "maps/dm8.bsp", // Deathmatch Maps
	
	// Scourge Of Armagon (HIPNOTIC)
	"maps/hip1m1.bsp", "maps/hip1m2.bsp", "maps/hip1m3.bsp", "maps/hip1m4.bsp", "maps/hip1m5.bsp", // EP1: Fortress Of The Dead
	"maps/hip2m1.bsp", "maps/hip2m2.bsp", "maps/hip2m3.bsp", "maps/hip2m4.bsp", "maps/hip2m5.bsp", "maps/hip2m6.bsp", // EP2: Dominion Of Darkness
	"maps/hip3m1.bsp", "maps/hip3m2.bsp", "maps/hip3m3.bsp", "maps/hip3m4.bsp", "maps/hipdm1.bsp", // EP3: The Rift
	"maps/hipend.bsp", // Finale	
	
	// Dissolution Of Eternity (ROGUE)
	"maps/r1m1.bsp", "maps/r1m2.bsp", "maps/r1m3.bsp", "maps/r1m4.bsp", "maps/r1m5.bsp", "maps/r1m6.bsp", "maps/r1m7.bsp", // EP1: Hell's Fortress 
	"maps/r2m1.bsp", "maps/r2m2.bsp", "maps/r2m3.bsp", "maps/r2m4.bsp", "maps/r2m5.bsp", "maps/r2m6.bsp", "maps/r2m7.bsp", // EP2: The Corridors Of Time
	"maps/r2m8.bsp", "maps/rend.bsp", // Finale
	"maps/ctf1.bsp", // CTF Map	
	
	// Dimension Of The Machine (MG1)
	"maps/mgdm1.bsp", "maps/mgdm2.bsp", "maps/mgdm3.bsp", "maps/mgdm4.bsp",	// Deathmatch Maps
	
	// Deathmatch
	"maps/aerowalk.bsp", 	
	
	// CTF
	"maps/ctf1_3wave.bsp", "maps/ctf2_3wave.bsp", "maps/ctf3_3wave.bsp", "maps/ctf4_3wave.bsp", "maps/ctf5_3wave.bsp", "maps/ctf6_3wave.bsp", "maps/ctf7_3wave.bsp", "maps/ctf8_3wave.bsp", "maps/ctf8_3wave_qe.bsp", 
	"maps/ctf2m1.bsp", "maps/ctf2m2.bsp", "maps/ctf2m3.bsp", "maps/ctf2m4.bsp", "maps/ctf2m5.bsp", "maps/ctf2m6.bsp", "maps/ctf2m7.bsp", "maps/ctf2m8.bsp", 	
	""
};

float() StartMaps_Finder = 
{
	local float cur = 0, max_maplist_number = Start_Maplist_World.length - 1;
	
	// Start Map Group
	for (; cur < max_maplist_number; ++cur)
	{
		if (world.model == Start_Maplist_World[cur]) break; // Map found		
	}
	
	if (cur < 1 || cur > max_maplist_number - 1) return FALSE; // If out-of-bounds, set to 0 since we're not using it this mapset.
		
	return cur;		
};

float() ID1_Maps_Finder = 
{
	local float cur = 0, max_maplist_number = ID1_Maplist_World.length - 1;
	
	// ID1 Map Group
	for (; cur < max_maplist_number; ++cur)
	{
		if (world.model == ID1_Maplist_World[cur]) break; // Map found		
	}
	
	if (cur < 1 || cur > max_maplist_number - 1) return FALSE; // If out-of-bounds, set to 0 since we're not using it this mapset.
	
	return cur;		
};

float() HIP_Maps_Finder = 
{
	local float cur = 0, max_maplist_number = HIP_Maplist_World.length - 1;
	
	// HIPNOTIC Map Group
	for (; cur < max_maplist_number; ++cur)
	{
		if (world.model == HIP_Maplist_World[cur]) break; // Map found		
	}
	
	if (cur < 1 || cur > max_maplist_number - 1) return FALSE; // If out-of-bounds, set to 0 since we're not using it this mapset.
	
	return cur;		
};

float() ROGUE_Maps_Finder = 
{
	local float cur = 0, max_maplist_number = ROGUE_Maplist_World.length - 1;
	
	// ROGUE Map Group
	for (; cur < max_maplist_number; ++cur)
	{
		if (world.model == ROGUE_Maplist_World[cur]) break; // Map found		
	}
	
	if (cur < 1 || cur > max_maplist_number - 1) return FALSE; // If out-of-bounds, set to 0 since we're not using it this mapset.
	
	return cur;		
};

float() DOPA_Maps_Finder = 
{
	local float cur = 0, max_maplist_number = DOPA_Maplist_World.length - 1;
	
	// DOPA Map Group
	for (; cur < max_maplist_number; ++cur)
	{
		if (world.model == DOPA_Maplist_World[cur]) break; // Map found		
	}
	
	if (cur < 1 || cur > max_maplist_number - 1) return FALSE; // If out-of-bounds, set to 0 since we're not using it this mapset.
	
	return cur;		
};

float() MG1_Maps_Finder = 
{
	local float cur = 0, max_maplist_number = MG1_Maplist_World.length - 1;
	
	// MG1 Map Group
	for (; cur < max_maplist_number; ++cur)
	{
		if (world.model == MG1_Maplist_World[cur]) break; // Map found		
	}
	
	if (cur < 1 || cur > max_maplist_number - 1) return FALSE; // If out-of-bounds, set to 0 since we're not using it this mapset.
	
	return cur;		
};

float() HordeMaps_Finder = 
{
	local float cur = 0, max_maplist_number = HordeMode_MapsList_World.length - 1;
	
	// Horde Map Group
	for (; cur < max_maplist_number; ++cur)
	{
		if (world.model == HordeMode_MapsList_World[cur]) break; // Map found		
	}
	
	if (cur < 1 || cur > max_maplist_number - 1) return FALSE; // If out-of-bounds, set to 0 since we're not using it this mapset.
	
	return cur;		
};

float() CustomCoopMaps_Finder = 
{
	local float cur = 0, max_maplist_number = CustomCoop_MapsList_World.length - 1;
	
	// Custom Coop Map Group
	for (; cur < max_maplist_number; ++cur)
	{
		if (world.model == CustomCoop_MapsList_World[cur]) break; // Map found		
	}
		
	if (cur < 1 || cur > max_maplist_number - 1) return FALSE; // If out-of-bounds, set to 0 since we're not using it this mapset.
	
	return cur;		
};

float() CustomDMMaps_Finder = 
{
	local float cur = 0, max_maplist_number = CustomDM_Maplist_World.length - 1;
	
	// Custom Coop Map Group
	for (; cur < max_maplist_number; ++cur)
	{
		if (world.model == CustomDM_Maplist_World[cur]) break; // Map found		
	}
		
	if (cur < 1 || cur > max_maplist_number - 1) return FALSE; // If out-of-bounds, set to 0 since we're not using it this mapset.
	
	return cur;		
};